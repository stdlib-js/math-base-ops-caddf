{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport Complex64 from '@stdlib/complex-float32';\nimport realf from '@stdlib/complex-realf';\nimport imagf from '@stdlib/complex-imagf';\n\n\n// MAIN //\n\n/**\n* Adds two single-precision complex floating-point numbers.\n*\n* @param {Complex64} z1 - complex number\n* @param {Complex64} z2 - complex number\n* @returns {Complex64} result\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var z = new Complex64( 5.0, 3.0 );\n* // returns <Complex64>\n*\n* var out = caddf( z, z );\n* // returns <Complex64>\n*\n* var re = realf( out );\n* // returns 10.0\n*\n* var im = imagf( out );\n* // returns 6.0\n*/\nfunction caddf( z1, z2 ) {\n\tvar re = float64ToFloat32( realf( z1 ) + realf( z2 ) );\n\tvar im = float64ToFloat32( imagf( z1 ) + imagf( z2 ) );\n\treturn new Complex64( re, im );\n}\n\n\n// EXPORTS //\n\nexport default caddf;\n"],"names":["caddf","z1","z2","re","float64ToFloat32","realf","im","imagf","Complex64"],"mappings":";;4WAsDA,SAASA,EAAOC,EAAIC,GACnB,IAAIC,EAAKC,EAAkBC,EAAOJ,GAAOI,EAAOH,IAC5CI,EAAKF,EAAkBG,EAAON,GAAOM,EAAOL,IAChD,OAAO,IAAIM,EAAWL,EAAIG,EAC3B"}